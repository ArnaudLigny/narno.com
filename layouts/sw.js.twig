// service worker config
var CACHE_VERSION = "{{ 'now'|date('U') }}";
var CACHE_NAME = '{{ site.title|urlize }}';
var CACHE = CACHE_NAME + '-v' + CACHE_VERSION;
var urlsToCache = [];

// pre-cache all pages
{% for page in site.pages %}
urlsToCache.push('{{ url(page) }}');
{% endfor %}
// pre-cache files
{% if site.serviceworker is defined %}
{% for file in site.serviceworker.precache %}
urlsToCache.push('{{ url(file) }}');
{% endfor %}
{% endif %}

// install service worker
self.addEventListener('install', function(event) {
  console.log('[SW] Install');
  event.waitUntil(
    self.skipWaiting(
      caches.open(CACHE).then(function(cache) {
        console.log('[SW] Caching');
        return cache.addAll(urlsToCache);
      })
    )
  );
});

// activate service worker
self.addEventListener('activate', function(event) {
  console.log('[SW] Activate');
  event.waitUntil(
    caches.keys().then(function(keyList) {
      return Promise.all(keyList.map(function(key) {
        if (key !== CACHE) {
          console.log('[SW] Removing old cache', key);
          return caches.delete(key);
        }
      }));
    })
  );
  event.waitUntil(self.clients.claim());
});

// fetch data
self.addEventListener('fetch', function(event) {
  console.log('[SW] Fetch ', event.request.url);

  // ignore non-GET requests
  if (event.request.method !== 'GET') {
    return;
  }

  // ignore non-local resources
  url = new URL(event.request.url);
  if (!(url.origin == location.origin)) {
    return;
  }

  event.respondWith(
    caches.match(event.request).then(function(response) {
      // return response from cache if exist
      if (response) {
        return response;
      } else {
        // offline image
        if (event.request.headers.get('Accept').indexOf('image') !== -1) {
          return new Response('<svg role="img" aria-labelledby="offline-title" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><title id="offline-title">Offline</title><g fill="none" fill-rule="evenodd"><path fill="#D8D8D8" d="M0 0h400v300H0z"/><text fill="#505050" font-family="Helvetica Neue,Arial,Helvetica,sans-serif" font-size="72" font-style="italic"><tspan x="93" y="172">offline</tspan></text></g></svg>', {headers: {'Content-Type': 'image/svg+xml'}});
        }
      }
      // store visited ressource to cache
      var fetchRequest = event.request.clone();
      return fetch(fetchRequest).then(
        function(response) {
          // ignore if response is not valid
          if (!response
            || response.status !== 200
            || response.type !== 'basic'
            //|| fetchRequest.mode !== 'same-origin'
          ) {
            return response;
          }
          var responseToCache = response.clone();
          caches.open(CACHE).then(function(cache) {
            // ignore "data" URL
            if (event.request.url.startsWith('data:')) {
              return;
            }
            console.log('[SW] Store ', event.request.url);
            cache.put(event.request, responseToCache);
          });
          return response;
        }
      );
    })
  );
});
